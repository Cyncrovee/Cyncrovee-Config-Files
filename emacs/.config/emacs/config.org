#+TITLE: Emacs Configuration
#+AUTHOR: Cyncrovee
#+DESCRIPTION: My emacs configuration, the file format is .org however it should be able to be parsed and applied to emacs via org-babel

* Setup use-package
- See: https://github.com/jwiegley/use-package, GPL-3.0
#+BEGIN_SRC elisp
  (eval-when-compile
    (add-to-list 'load-path "<path where use-package is installed>")
    (require 'use-package))
#+END_SRC

* Package Managment (ELPA)
** ELPA Themes(s)
- Modus-Themes
#+BEGIN_SRC elisp
  (use-package modus-themes
    :ensure t)
#+END_SRC
** ELPA Packages
- Magit
- Flycheck
- Embark
- Org (Mode)
- Projectile
- Indent-Bars (See: https://github.com/jdtsmith/indent-bars, GPL-3.0, changes made)
- Evil (See: https://github.com/emacs-evil/evil & https://github.com/emacs-evil/evil-collection, both GPL-3.0)
- Company
- Vertico
- Marginalia
- Orderless (See: https://github.com/oantolin/orderless, GPL-3.0)
#+BEGIN_SRC elisp
  (use-package magit
    :ensure t)
  (use-package flycheck
    :ensure t)
  (use-package embark
    :ensure t)
  (use-package avy
    :ensure t)
  (use-package diff-hl
    :ensure t
    :init
    (global-diff-hl-mode))
  (use-package org
    :ensure t
    :init
    (setq org-todo-keywords
        '((sequence "TODO" "ACTIVE" "INPROGRESS" "|" "DONE" "INACTIVE" "CANCELLED" "UNKNOWN"))))
  (use-package projectile
    :ensure t
    :init
    (projectile-mode))
  (use-package indent-bars
    :ensure t
    :hook ((lsp-mode org-mode) . indent-bars-mode))
  (use-package evil
    :ensure t
    :init
    (setq evil-want-keybinding nil)
    (evil-mode)
    :config
    (evil-set-undo-system 'undo-redo))
  (use-package company
    :ensure t
    :init
    (setq-default company-minimum-prefix-length 1)
    (setq-default company-idle-delay 0)
    (global-company-mode)
    (company-tng-mode))
  (use-package vertico
    :ensure t
    :init
    (vertico-mode))
  (use-package marginalia
    :ensure t
    :init
    (marginalia-mode))
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+END_SRC

* Package Managment (MELPA)
** Setup MELPA stable
- See: https://stable.melpa.org/#/getting-started and https://github.com/melpa/melpa, GPL-3.0 (changes made)
#+BEGIN_SRC elisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://stable.melpa.org/packages/") t)
#+END_SRC
** MELPA Theme(s)
- Doom-Themes
#+BEGIN_SRC elisp
  (use-package doom-themes
    :ensure t)
#+END_SRC
** MELPA Packages
- Treemacs (See https://github.com/Alexander-Miller/treemacs, GPL-3.0, changes made)
- Centaur-Tabs (See https://github.com/ema2159/centaur-tabs, GPL-3.0, changes made)
- LSP-Mode See: (https://github.com/emacs-lsp/lsp-mode, GPL-3.0, changes made)
- LSP-UI
- Evil-Collection (See: https://github.com/emacs-evil/evil & https://github.com/emacs-evil/evil-collection, both GPL-3.0, changes made)
- Rustic
- Doom-Modeline
- Dashboard (See https://github.com/emacs-dashboard/emacs-dashboard, GPL-3.0, changes made)
#+BEGIN_SRC elisp
  (use-package rainbow-delimiters
    :ensure t
    :hook (lsp-mode emacs-lisp-mode))
  (use-package crux
    :ensure t)
  (use-package treemacs
    :ensure t
    :init
    (treemacs-project-follow-mode)
    (setq-default treemacs-no-png-images t))
  (use-package olivetti
    :ensure t
    :init
    (setq olivetti-body-width 190)
    :hook (eww-mode))
  (use-package centaur-tabs
    :ensure t
    :init
    (centaur-tabs-mode)
    (centaur-tabs-group-by-projectile-project)
    (setq-default centaur-tabs-style "bar")        ; Some themes have trouble with this setting, try setting the theme as safe, then restarting emacs
    (setq-default centaur-tabs-set-bar 'left))
  (use-package lsp-mode
    :ensure t
    :hook (rust-ts-mode . lsp-deferred)
    :commands (lsp-deferred))
  (use-package lsp-ui
    :ensure t)
  (use-package evil-collection
    :after evil
    :ensure t
    :init
    (evil-collection-init))
  (use-package rustic
    :ensure t)
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode))
    (setq-default doom-modeline-indent-info t)       ; Show information about the indentation settings
    (setq-default doom-modeline-total-line-number t) ; Show the total amount of lines in the buffer
    (setq-default doom-modeline-workspace-name t)    ; Show workspace name
  (use-package dashboard
    :ensure t
    :config
    (setq dashboard-center-content t)
    (setq dashboard-vertically-center-content t)
    (setq dashboard-startup-banner "~/.config/emacs/assets/Emacs-Dashboard-Banner.txt")
    (setq dashboard-footer-messages '("Change is difficult, but it’s how we grow"
                                        "It’s kind of like Vim, but not"
                                        "Technically, it’s a display editor"
                                        "Org or Markdown- decisions, decisions"
                                        "If push comes to shove, you can always try a distro"
                                        "Have you ever been to space?"
                                        "Be wary of bankruptcy!"
                                        "Don’t drink and dive!"
                                        "Trans rights are human rights!"
                                        "Splash Text!"
                                        "We all lift together!"
                                        "I Give It All!"
                                        "What goes up..."
                                        "We trade one villain for another..."
                                        "There’ll be another time..."
                                        "Just one more package..."))
    (setq dashboard-items '((recents   . 5)
                            (bookmarks . 10)
                            (projects  . 10)
                            (agenda    . 10)))
    (dashboard-setup-startup-hook))
#+END_SRC

* General Options
** Load Theme
- Note that when first booting the config, it may prompt you to manually confirm whether or not you want to load the theme defined with "(load-theme)" function, as enabling themes can run code. After which, it may prompt you to treat the theme as safe for future sessions- if you choose to do so, it will add a "(custom-set-variables)" section to the init.el file. If said section is *below* the "(load-theme)" function, it will continue to prompt you to manually set the theme on boot. The prevent this, you can try moving the "(custom-set-variables)" section to *above* the "(load-theme)" function (which is how I have been using it for the most part). If you’re having trouble with theme compatability with centaur tabs, treating a theme as safe then reloading emacs might fix it.
#+BEGIN_SRC elisp
  (load-theme 'doom-one) ; Feel free to swap out with another theme
#+END_SRC
** Enable mode(s)
#+BEGIN_SRC elisp
  (global-auto-revert-mode)                      ; Automatically refresh file
  (menu-bar--display-line-numbers-mode-relative) ; Set line numbers mode to relative
  (global-display-line-numbers-mode)             ; Enable line numbers
  (global-hl-line-mode)                          ; Highlight current line
  (column-number-mode)                           ; Display line number/column
  (electric-pair-mode)                           ; Automatically close parens
  (electric-quote-mode)                          ; Automatically close quotes
  (windmove-mode)                                ; Easier window switching
#+END_SRC
** Set options
#+BEGIN_SRC elisp
  (setq-default
    use-short-answers t              ; Enable the use of short answers (y/n) in yes/no prompts
    make-backup-files nil            ; Disable backup files
    auto-save-default nil            ; Disable auto save files
    create-lockfiles nil             ; Disable lock file creation
    display-line-numbers-width 4     ; Set the width of the line number column
    tab-width 4                      ; Set tab spaces to 4
    indent-tabs-mode nil)             ; Convert tabs to spaces
#+END_SRC
** Set keymaps
#+BEGIN_SRC elisp
  (evil-set-leader 'normal (kbd "SPC")) ;; Set evil leader key to space
  ;; General
  (evil-global-set-key 'normal (kbd "<leader> SPC") 'execute-extended-command) ; Open command minibuffer
  (evil-global-set-key 'normal (kbd "<leader> db") 'dashboard-open)            ; Open/refresh the dashboard
  ;; Evil
  (evil-global-set-key 'normal (kbd "<leader> ew") 'evil-write)     ; Write to (save) file
  (evil-global-set-key 'normal (kbd "<leader> eqq") 'evil-quit)     ; Write to (save) file
  (evil-global-set-key 'normal (kbd "<leader> eqa") 'evil-quit-all) ; Write to (save) file
  ;; Windows (SPC w...)
  (evil-global-set-key 'normal (kbd "<leader> wk") 'windmove-up)          ; Move to the above window
  (evil-global-set-key 'normal (kbd "<leader> wj") 'windmove-down)        ; Move to the below window
  (evil-global-set-key 'normal (kbd "<leader> wh") 'windmove-left)        ; Move to the left window
  (evil-global-set-key 'normal (kbd "<leader> wl") 'windmove-right)       ; Move to the right window
  (evil-global-set-key 'normal (kbd "<leader> ww") 'ace-window)           ; Call ace window
  (evil-global-set-key 'normal (kbd "<leader> wo") 'delete-other-windows) ; Call ace window
  (evil-global-set-key 'normal (kbd "<leader> wt") 'treemacs)             ; Opens/closes the treemacs file tree
  (evil-global-set-key 'normal (kbd "<leader> wsh") 'evil-window-split)   ; Split the window horizontally
  (evil-global-set-key 'normal (kbd "<leader> wsv") 'evil-window-vsplit)  ; Split the window vertically
  ;; Evil-avy (SPC a...)
  (evil-global-set-key 'normal (kbd "<leader> all") 'evil-avy-goto-line)       ; Goto specific line
  (evil-global-set-key 'normal (kbd "<leader> ala") 'evil-avy-goto-line-above) ; Goto specific line above
  (evil-global-set-key 'normal (kbd "<leader> alb") 'evil-avy-goto-line-below) ; Goto specific line below
  (evil-global-set-key 'normal (kbd "<leader> ac") 'evil-avy-goto-char)        ; Goto specific char
  ;; Buffers (SPC b...)
  (evil-global-set-key 'normal (kbd "<leader> bn") 'next-buffer)      ; Move to the next buffer
  (evil-global-set-key 'normal (kbd "<leader> bp") 'previous-buffer)  ; Move to the previous buffer
  (evil-global-set-key 'normal (kbd "<leader> bk") 'kill-this-buffer) ; Kill the current buffer
  (evil-global-set-key 'normal (kbd "<leader> bi") 'ibuffer)          ; Open the ibuffer menu
  ;; Tabs (SPC t...)
  (evil-global-set-key 'normal (kbd "<leader> tg") 'centaur-tabs--groups-menu) ; Open the centaur-tabs group menu
  ;; Dired (SPC d...)
  (evil-global-set-key 'normal (kbd "<leader> dp") 'projectile-dired) ; Open dired in the current projectile project’s root
  ;; LSP (SPC l...)
  (evil-global-set-key 'normal (kbd "<leader> lf") 'lsp-format-buffer) ; Format the current buffer via the LSP
  ;; Org (SPC o...)
  (evil-global-set-key 'normal (kbd "<leader> oi") 'org-indent-mode) ; Enter org indent mode
  (evil-global-set-key 'normal (kbd "<leader> oa") 'org-agenda)      ; Open the org agenda
  (evil-global-set-key 'normal (kbd "<leader> oa") 'org-agenda-exit) ; Close the org agenda
  ;; Embark (SPC e...)
  (evil-global-set-key 'normal (kbd "<leader> ea") 'embark-act) ; Call embark
  ;; Modes
  (evil-global-set-key 'normal (kbd "<leader> mo") 'olivetti-mode) ; Toggle olivetti mode

  ;; Use C-tab and C-shift-tab to navigate buffers
  (keymap-global-set "C-<tab>" 'centaur-tabs-forward)
  (keymap-global-set "C-<iso-lefttab>" 'centaur-tabs-backward)
#+END_SRC
